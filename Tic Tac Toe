One more day on GitHub within the GrowthHungry Challenge

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner; 
import java.util.Random;
import java.util.ArrayList;
import java.util.List;



Tic Tac Toe code in Java. There are some mistakes that need to be improved. 
public class Main {
    static ArrayList<Integer> playerPosition = new ArrayList<Integer>(); 
    static ArrayList<Integer> cpuPosition = new ArrayList<Integer>(); 
    public static void main(String[] args) {
        char[][] gameBoard = {{' ', '|', ' ', '|', ' '},
                            {'-', '+', '-', '+', '-'},
                            {' ', '|', ' ', '|', ' '},
                            {'-', '+', '-', '+', '-'},
                            {' ', '|', ' ', '|', ' '}}; 
        // 1) we build the gameboard
        Scanner scan = new Scanner (System.in); 
        while(true){
            System.out.println("Which cell do you choose?"); 
            int pPos = scan.nextInt(); 
            while (playerPosition.contains(pPos) || cpuPosition.contains(pPos)) {
                System.out.println("The cell is occupied. Choose a different one");
                pPos = scan.nextInt();  
            }
            mover(gameBoard, pPos, "human");
            String result = checkWinner();

            if(result.length() > 0) {
                System.out.println(result); 
                break; 
            }
        // we created the interactive code that takes the position of where to put x or o. 
            
            Random rand = new Random();
            int cpuPos = rand.nextInt(9)+1;
            while (playerPosition.contains(cpuPos) || cpuPosition.contains(cpuPos)) {
                cpuPos = rand.nextInt(9)+1;
            } 
            mover(gameBoard, cpuPos, "computer");
        // added randomization for the computer moves. +1 not to have a 0 position 
        
            
        // we used the mover method to ask the player where to put the X
            printGameBoard(gameBoard); // 3) we called the method

            result = checkWinner(); 
            if(result.length() > 0) {
                System.out.println(result); 
                break; 
            }
            
        }
    }

    public static void printGameBoard(char[][] gameBoard) {
        for (char[] row : gameBoard) {
            for(char c : row) {
                System.out.print(c);
            } // 2) we defined how to iterrate through the gameboard to print out the lines as a gameboard. We made it as a method to simply call it. 
            System.out.println();
        }
    }

    public static void mover(char[][] gameBoard, int position, String player) {
        char symbol = ' '; 
        if(player.equals("human")) {
            symbol = 'X';
            playerPosition.add(position);
        } else if(player.equals("computer")) {
            symbol = 'O'; 
            cpuPosition.add(position);
        }

        switch(position) {
            case 1: 
                gameBoard[0][0] = symbol;
                break; 
            case 2: 
                gameBoard[0][2] = symbol;
                break;
            case 3: 
                gameBoard[0][4] = symbol;
                break;
            case 4: 
                gameBoard[2][0] = symbol;
                break;
            case 5:
                gameBoard[2][2] = symbol;
                break;
            case 6: 
                gameBoard[2][4] = symbol;
                break;
            case 7:
                gameBoard[4][0] = symbol;
                break;
            case 8:
                gameBoard[4][2] = symbol;
                break; 
            case 9: 
                gameBoard[4][4] = symbol;
                break;
            default: 
                break; 
        }

        
    }


    public static String checkWinner() {
        List topRow = Arrays.asList(1,2,3); 
        List midRow = Arrays.asList(4,5,6); 
        List botRow = Arrays.asList(7,8,9); 
        List leftCol = Arrays.asList(1,4,7); 
        List midCol = Arrays.asList(2,5,8); 
        List rightCol = Arrays.asList(3,6,9); 
        List cross1 = Arrays.asList(3,5,7); 
        List cross2 = Arrays.asList(1,5,9); 

        List<List> winning = new ArrayList<List>(); 
        winning.add(topRow); 
        winning.add(midRow); 
        winning.add(botRow); 
        winning.add(leftCol); 
        winning.add(midCol); 
        winning.add(rightCol); 
        winning.add(cross1); 
        winning.add(cross2);    

        for(List w:winning) {
            if(playerPosition.containsAll(w)) { 
                return "Congrats! You Won!";
            } else if(cpuPosition.containsAll(w)) {
                return "Loser! Boo"; 
            } else if(playerPosition.size() + cpuPosition.size() == 9) {
                return "Draw! You are both losers"; 
            }
            
        }

        return " "; 



    }
}







    
    




